;; Auto-generated. Do not edit!


(when (boundp 'cwru_action::cart_moveGoal)
  (if (not (find-package "CWRU_ACTION"))
    (make-package "CWRU_ACTION"))
  (shadow 'cart_moveGoal (find-package "CWRU_ACTION")))
(unless (find-package "CWRU_ACTION::CART_MOVEGOAL")
  (make-package "CWRU_ACTION::CART_MOVEGOAL"))

(in-package "ROS")
;;//! \htmlinclude cart_moveGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass cwru_action::cart_moveGoal
  :super ros::object
  :slots (_des_pose_gripper1 _des_pose_gripper2 _gripper_jaw_angle1 _gripper_jaw_angle2 _move_time ))

(defmethod cwru_action::cart_moveGoal
  (:init
   (&key
    ((:des_pose_gripper1 __des_pose_gripper1) (instance geometry_msgs::PoseStamped :init))
    ((:des_pose_gripper2 __des_pose_gripper2) (instance geometry_msgs::PoseStamped :init))
    ((:gripper_jaw_angle1 __gripper_jaw_angle1) 0.0)
    ((:gripper_jaw_angle2 __gripper_jaw_angle2) 0.0)
    ((:move_time __move_time) 0.0)
    )
   (send-super :init)
   (setq _des_pose_gripper1 __des_pose_gripper1)
   (setq _des_pose_gripper2 __des_pose_gripper2)
   (setq _gripper_jaw_angle1 (float __gripper_jaw_angle1))
   (setq _gripper_jaw_angle2 (float __gripper_jaw_angle2))
   (setq _move_time (float __move_time))
   self)
  (:des_pose_gripper1
   (&rest __des_pose_gripper1)
   (if (keywordp (car __des_pose_gripper1))
       (send* _des_pose_gripper1 __des_pose_gripper1)
     (progn
       (if __des_pose_gripper1 (setq _des_pose_gripper1 (car __des_pose_gripper1)))
       _des_pose_gripper1)))
  (:des_pose_gripper2
   (&rest __des_pose_gripper2)
   (if (keywordp (car __des_pose_gripper2))
       (send* _des_pose_gripper2 __des_pose_gripper2)
     (progn
       (if __des_pose_gripper2 (setq _des_pose_gripper2 (car __des_pose_gripper2)))
       _des_pose_gripper2)))
  (:gripper_jaw_angle1
   (&optional __gripper_jaw_angle1)
   (if __gripper_jaw_angle1 (setq _gripper_jaw_angle1 __gripper_jaw_angle1)) _gripper_jaw_angle1)
  (:gripper_jaw_angle2
   (&optional __gripper_jaw_angle2)
   (if __gripper_jaw_angle2 (setq _gripper_jaw_angle2 __gripper_jaw_angle2)) _gripper_jaw_angle2)
  (:move_time
   (&optional __move_time)
   (if __move_time (setq _move_time __move_time)) _move_time)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/PoseStamped _des_pose_gripper1
    (send _des_pose_gripper1 :serialization-length)
    ;; geometry_msgs/PoseStamped _des_pose_gripper2
    (send _des_pose_gripper2 :serialization-length)
    ;; float64 _gripper_jaw_angle1
    8
    ;; float64 _gripper_jaw_angle2
    8
    ;; float64 _move_time
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/PoseStamped _des_pose_gripper1
       (send _des_pose_gripper1 :serialize s)
     ;; geometry_msgs/PoseStamped _des_pose_gripper2
       (send _des_pose_gripper2 :serialize s)
     ;; float64 _gripper_jaw_angle1
       (sys::poke _gripper_jaw_angle1 (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _gripper_jaw_angle2
       (sys::poke _gripper_jaw_angle2 (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; float64 _move_time
       (sys::poke _move_time (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/PoseStamped _des_pose_gripper1
     (send _des_pose_gripper1 :deserialize buf ptr-) (incf ptr- (send _des_pose_gripper1 :serialization-length))
   ;; geometry_msgs/PoseStamped _des_pose_gripper2
     (send _des_pose_gripper2 :deserialize buf ptr-) (incf ptr- (send _des_pose_gripper2 :serialization-length))
   ;; float64 _gripper_jaw_angle1
     (setq _gripper_jaw_angle1 (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _gripper_jaw_angle2
     (setq _gripper_jaw_angle2 (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; float64 _move_time
     (setq _move_time (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;;
   self)
  )

(setf (get cwru_action::cart_moveGoal :md5sum-) "d2631f788d8e0cc2d280c449b075f8f9")
(setf (get cwru_action::cart_moveGoal :datatype-) "cwru_action/cart_moveGoal")
(setf (get cwru_action::cart_moveGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#This action message must specify desired pose for gripper1, jaw opening for gripper1,
# desired pose for gripper2, jaw opening for gripper 2, and desired duration of move (in sec)
#goal:
geometry_msgs/PoseStamped des_pose_gripper1
geometry_msgs/PoseStamped des_pose_gripper2
float64 gripper_jaw_angle1
float64 gripper_jaw_angle2
float64 move_time

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :cwru_action/cart_moveGoal "d2631f788d8e0cc2d280c449b075f8f9")


